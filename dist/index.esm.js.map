{"version":3,"file":"index.esm.js","sources":["../src/utils/imageNameParser.ts","../src/webpack-loader.ts","../src/vite-plugin.ts","../src/index.ts"],"sourcesContent":["import { camelCase, startCase, lowerCase } from 'lodash';\n\nexport interface ImageNameParserOptions {\n  prefix?: string;\n  suffix?: string;\n  capitalize?: boolean;\n  removeNumbers?: boolean;\n  customMappings?: Record<string, string>;\n}\n\nexport class ImageNameParser {\n  private options: ImageNameParserOptions;\n\n  constructor(options: ImageNameParserOptions = {}) {\n    this.options = {\n      prefix: '',\n      suffix: '',\n      capitalize: true,\n      removeNumbers: false,\n      customMappings: {},\n      ...options,\n    };\n  }\n\n  /**\n   * Creates meaningful text from image filename\n   */\n  parseImageName(fileName: string): string {\n    if (!fileName) return '';\n\n    // Remove file extension\n    let name = this.removeFileExtension(fileName);\n    \n    // Check custom mappings\n    if (this.options.customMappings && this.options.customMappings[name]) {\n      return this.options.customMappings[name];\n    }\n\n    // Remove numbers (optional)\n    if (this.options.removeNumbers) {\n      name = name.replace(/\\d+/g, '');\n    }\n\n    // Replace underscores, dashes and dots with spaces\n    name = name.replace(/[_\\.-]/g, ' ');\n\n    // Separate camel case with spaces\n    name = this.separateCamelCase(name);\n\n    // Clean up extra spaces\n    name = name.replace(/\\s+/g, ' ').trim();\n\n    // Convert to title case\n    if (this.options.capitalize) {\n      name = startCase(lowerCase(name));\n    } else {\n      name = lowerCase(name);\n    }\n\n    // Add prefix and suffix\n    if (this.options.prefix) {\n      name = `${this.options.prefix} ${name}`;\n    }\n    if (this.options.suffix) {\n      name = `${name} ${this.options.suffix}`;\n    }\n\n    return name;\n  }\n\n  /**\n   * Removes file extension\n   */\n  private removeFileExtension(fileName: string): string {\n    return fileName.replace(/\\.[^/.]+$/, '');\n  }\n\n  /**\n   * Separates camel case text with spaces\n   */\n  private separateCamelCase(text: string): string {\n    return text.replace(/([A-Z])/g, ' $1');\n  }\n\n  /**\n   * Extracts filename from URL\n   */\n  extractFileNameFromUrl(url: string): string {\n    if (!url) return '';\n    \n    // Get filename from URL\n    const urlParts = url.split('/');\n    const fileName = urlParts[urlParts.length - 1];\n    \n    // Remove query parameters\n    return fileName.split('?')[0];\n  }\n\n  /**\n   * Extracts filename from src attribute and parses it\n   */\n  parseFromSrc(src: string): string {\n    const fileName = this.extractFileNameFromUrl(src);\n    return this.parseImageName(fileName);\n  }\n}\n\n// Default parser instance\nexport const defaultParser = new ImageNameParser(); ","import { ImageNameParser, ImageNameParserOptions } from './utils/imageNameParser';\n\nexport interface WebpackLoaderOptions {\n  parserOptions?: ImageNameParserOptions;\n  generateTitle?: boolean;\n  generateAlt?: boolean;\n  fallbackAlt?: string;\n  fallbackTitle?: string;\n}\n\nexport default function imageAltGeneratorLoader(\n  this: any,\n  source: string,\n  sourceMap?: any\n): string {\n  const options: WebpackLoaderOptions = this.getOptions() || {};\n  const {\n    parserOptions = {},\n    generateTitle = true,\n    generateAlt = true,\n    fallbackAlt = 'Image',\n    fallbackTitle = 'Image',\n  } = options;\n\n  const parser = new ImageNameParser(parserOptions);\n\n  // Find and replace img tags using simple regex\n  const imgTagRegex = /<img([^>]*?)>/g;\n  \n  const processedSource = source.replace(imgTagRegex, (match, attributes) => {\n    // Find src attribute\n    const srcMatch = attributes.match(/src=[\"']([^\"']+)[\"']/);\n    if (!srcMatch) {\n      return match; // Don't modify if no src\n    }\n\n    const srcValue = srcMatch[1];\n    const generatedText = parser.parseFromSrc(srcValue);\n\n    let newAttributes = attributes;\n\n    // Alt attribute check\n    const hasAlt = /alt=[\"']([^\"']*)[\"']/.test(attributes);\n    const altValue = attributes.match(/alt=[\"']([^\"']*)[\"']/)?.[1] || '';\n    \n    if (generateAlt && (!hasAlt || !altValue)) {\n      const newAlt = generatedText || fallbackAlt;\n      if (hasAlt) {\n        // Update existing alt\n        newAttributes = newAttributes.replace(\n          /alt=[\"']([^\"']*)[\"']/,\n          `alt=\"${newAlt}\"`\n        );\n      } else {\n        // Add new alt\n        newAttributes += ` alt=\"${newAlt}\"`;\n      }\n    }\n\n    // Title attribute check\n    const hasTitle = /title=[\"']([^\"']*)[\"']/.test(attributes);\n    const titleValue = attributes.match(/title=[\"']([^\"']*)[\"']/)?.[1] || '';\n    \n    if (generateTitle && (!hasTitle || !titleValue)) {\n      const newTitle = generatedText || fallbackTitle;\n      if (hasTitle) {\n        // Update existing title\n        newAttributes = newAttributes.replace(\n          /title=[\"']([^\"']*)[\"']/,\n          `title=\"${newTitle}\"`\n        );\n      } else {\n        // Add new title\n        newAttributes += ` title=\"${newTitle}\"`;\n      }\n    }\n\n    return `<img${newAttributes}>`;\n  });\n\n  return processedSource;\n} ","import { Plugin } from 'vite';\nimport { ImageNameParser, ImageNameParserOptions } from './utils/imageNameParser';\n\nexport interface VitePluginOptions {\n  parserOptions?: ImageNameParserOptions;\n  include?: string[];\n  exclude?: string[];\n  generateTitle?: boolean;\n  generateAlt?: boolean;\n  fallbackAlt?: string;\n  fallbackTitle?: string;\n}\n\nexport default function imageAltGeneratorVitePlugin(\n  options: VitePluginOptions = {}\n): Plugin {\n  const {\n    parserOptions = {},\n    include = [],\n    exclude = [],\n    generateTitle = true,\n    generateAlt = true,\n    fallbackAlt = 'Image',\n    fallbackTitle = 'Image',\n  } = options;\n\n  const parser = new ImageNameParser(parserOptions);\n\n  return {\n    name: 'image-alt-title-generator',\n    enforce: 'pre',\n    \n    transform(code: string, id: string) {\n      // Process JSX/TSX files and HTML files\n      if (!id.match(/\\.(jsx?|tsx?|html|vue|svelte)$/)) {\n        return null;\n      }\n\n      // File filtering\n      if (exclude.length > 0 && exclude.some(pattern => id.includes(pattern))) {\n        return null;\n      }\n      if (include.length > 0 && !include.some(pattern => id.includes(pattern))) {\n        return null;\n      }\n\n      // Find and replace img tags (both <img> and <img />)\n      const imgTagRegex = /<img([^>]*?)(\\/?)>/g;\n      let modified = false;\n      let newCode = code;\n\n      newCode = code.replace(imgTagRegex, (match, attributes, selfClosing) => {\n        // Find src attribute\n        const srcMatch = attributes.match(/src=[\"']([^\"']+)[\"']/);\n        if (!srcMatch) {\n          return match; // Don't modify if no src\n        }\n\n        const srcValue = srcMatch[1];\n        const generatedText = parser.parseFromSrc(srcValue);\n\n        let newAttributes = attributes;\n\n        // Alt attribute check\n        const hasAlt = /alt=[\"']([^\"']*)[\"']/.test(attributes);\n        const altValue = attributes.match(/alt=[\"']([^\"']*)[\"']/)?.[1] || '';\n        \n        if (generateAlt && (!hasAlt || !altValue)) {\n          const newAlt = generatedText || fallbackAlt;\n          if (hasAlt) {\n            // Update existing alt (only if empty)\n            newAttributes = newAttributes.replace(\n              /alt=[\"']([^\"']*)[\"']/,\n              `alt=\"${newAlt}\"`\n            );\n          } else {\n            // Add new alt\n            newAttributes += ` alt=\"${newAlt}\"`;\n          }\n          modified = true;\n        }\n\n        // Title attribute check\n        const hasTitle = /title=[\"']([^\"']*)[\"']/.test(attributes);\n        const titleValue = attributes.match(/title=[\"']([^\"']*)[\"']/)?.[1] || '';\n        \n        if (generateTitle && (!hasTitle || !titleValue)) {\n          const newTitle = generatedText || fallbackTitle;\n          if (hasTitle) {\n            // Update existing title (only if empty)\n            newAttributes = newAttributes.replace(\n              /title=[\"']([^\"']*)[\"']/,\n              `title=\"${newTitle}\"`\n            );\n          } else {\n            // Add new title\n            newAttributes += ` title=\"${newTitle}\"`;\n          }\n          modified = true;\n        }\n\n        // Preserve self-closing syntax\n        return `<img${newAttributes}${selfClosing}>`;\n      });\n\n      return modified ? { code: newCode, map: null } : null;\n    }\n  };\n} ","// Utils (Framework-agnostic)\nexport { ImageNameParser, defaultParser } from './utils/imageNameParser';\nexport type { ImageNameParserOptions } from './utils/imageNameParser';\n\n// Build-time plugins (Framework-agnostic)\nexport { default as webpackLoader } from './webpack-loader';\nexport type { WebpackLoaderOptions } from './webpack-loader';\n\nexport { default as vitePlugin } from './vite-plugin';\nexport type { VitePluginOptions } from './vite-plugin';\n\n// Import the actual modules for default export\nimport { ImageNameParser, defaultParser } from './utils/imageNameParser';\nimport webpackLoader from './webpack-loader';\nimport vitePlugin from './vite-plugin';\n\n// Default exports - this allows both named and default imports\nconst imageAltTitleGenerator = {\n  ImageNameParser,\n  defaultParser,\n  webpackLoader,\n  vitePlugin,\n};\n\nexport default imageAltTitleGenerator;\n\n// Also export the main plugin as the default for easier usage\nexport { default as imageAltGenerator } from './vite-plugin'; "],"names":["webpackLoader","vitePlugin"],"mappings":"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"}